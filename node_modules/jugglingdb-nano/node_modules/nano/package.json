{
  "name": "nano",
  "description": "minimalistic couchdb driver for node.js",
  "homepage": "http://github.com/dscape/nano",
  "repository": {
    "type": "git",
    "url": "git://github.com/dscape/nano"
  },
  "version": "3.3.8",
  "author": {
    "name": "Nuno Job",
    "email": "nunojobpinto@gmail.com",
    "url": "http://nunojob.com"
  },
  "contributors": [
    {
      "name": "Thiago Arrais",
      "email": "thiago.arrais@gmail.com",
      "url": "http://thiagoarrais.com"
    },
    {
      "name": "Derek Perez",
      "email": "derek@derekperez.com",
      "url": "http://blog.derekperez.com"
    },
    {
      "name": "Patrick Heneise",
      "url": "http://patrickheneise.me"
    },
    {
      "name": "Artur Konarski",
      "url": "http://tarantoga.com"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "http://metaduck.com"
    },
    {
      "name": "Tom Wilson",
      "email": "tom@jackhq.com",
      "url": "http://jackhq.tumblr.com"
    },
    {
      "name": "Dale Harvey",
      "email": "dale@arandomurl.com",
      "url": "http://arandomurl.com"
    },
    {
      "name": "Jan Lehnardt",
      "email": "jan@apache.org",
      "url": "http://jan.prima.de/plok/"
    },
    {
      "name": "InTheFiveByFive"
    },
    {
      "name": "StÃ©phane Alnet",
      "email": "stephane@shimaore.net",
      "url": "http://blog.shimaore.net"
    },
    {
      "name": "Cliffano Subagio",
      "url": "http://blog.cliffano.com"
    },
    {
      "name": "Mark Hahn",
      "url": "http://hahnca.com"
    },
    {
      "name": "Francesco Ceccon",
      "email": "francesco@ceccon.me",
      "url": "http://francesco-cek.com/"
    },
    {
      "name": "Oliver Leics",
      "url": "http://oleics.github.com"
    },
    {
      "name": "Jonathan Mahoney",
      "url": "http://mahoney.eu"
    },
    {
      "name": "Dominique Sandoz",
      "email": "dominique.sandoz@gmail.com"
    },
    {
      "name": "John Lancaster",
      "email": "john.k.lancaster@gmail.com",
      "url": "http://jlank.com"
    },
    {
      "name": "Clemens Stolle",
      "url": "https://github.com/klaemo"
    },
    {
      "name": "Jay Beavers",
      "email": "jay.beavers@microsoft.com",
      "url": "http://jaybeavers.org"
    },
    {
      "name": "Juraj Vitko"
    },
    {
      "name": "Paul Iannazzo",
      "email": "somethingitalian@gmail.com",
      "url": "http://pppaul.me"
    },
    {
      "name": "Sebastian Tiedtke",
      "email": "sebastiantiedtke@gmail.com"
    },
    {
      "name": "Gregory T. Corrigan",
      "url": "https://github.com/corrigang"
    },
    {
      "name": "Etienne Folio",
      "url": "https://github.com/Ornthalas"
    },
    {
      "name": "John Chesley",
      "url": "http://chesl.es"
    }
  ],
  "keywords": [
    "couchdb",
    "data",
    "request",
    "json",
    "nosql",
    "micro",
    "nano",
    "database"
  ],
  "dependencies": {
    "request": "2.16.x",
    "follow": "0.8.x",
    "errs": "0.2.x",
    "underscore": "1.4.x"
  },
  "devDependencies": {
    "async": "0.1.x",
    "specify": "1.1.x",
    "nock": "0.14.x"
  },
  "scripts": {
    "test": "node node_modules/specify/bin/specify -e NOCK=on",
    "compact": "node node_modules/specify/bin/specify -e NOCK=on -r compact",
    "nock_off": "node node_modules/specify/bin/specify"
  },
  "main": "./nano.js",
  "engines": {
    "node": ">=0.3.6"
  },
  "readme": "# nano\n\nminimalistic couchdb driver for node.js\n\n`nano` features:\n\n* **minimalistic** - there is only a minimum of abstraction between you and \n  couchdb\n* **pipes** - proxy requests from couchdb directly to your end user\n* **errors** - errors are proxied directly from couchdb: if you know couchdb \n  you already know `nano`\n\n\n## installation\n\n1. install [npm][1]\n2. `npm install nano`\n\n## table of contents\n\n- [getting started](#getting-started)\n- [tutorials & screencasts](#tutorials--screencasts)\n- [configuration](#configuration)\n- [database functions](#database-functions)\n\t- [nano.db.create(name, [callback])](#nanodbcreatename-callback)\n\t- [nano.db.get(name, [callback])](#nanodbgetname-callback)\n\t- [nano.db.destroy(name, [callback])](#nanodbdestroyname-callback)\n\t- [nano.db.list([callback])](#nanodblistcallback)\n\t- [nano.db.compact(name, [designname], [callback])](#nanodbcompactname-designname-callback)\n\t- [nano.db.replicate(source, target, [opts], [callback])](#nanodbreplicatesource-target-opts-callback)\n\t- [nano.db.changes(name, [params], [callback])](#nanodbchangesname-params-callback)\n\t- [nano.db.follow(name, [params], [callback])](#nanodbfollowname-params-callback)\n\t- [nano.use(name)](#nanousename)\n\t- [nano.request(opts, [callback])](#nanorequestopts-callback)\n\t- [nano.config](#nanoconfig)\n- [document functions](#document-functions)\n\t- [db.insert(doc, [params], [callback])](#dbinsertdoc-params-callback)\n\t- [db.destroy(docname, rev, [callback])](#dbdestroydocname-rev-callback)\n\t- [db.get(docname, [params], [callback])](#dbgetdocname-params-callback)\n\t- [db.head(docname, [callback])](#dbheaddocname-callback)\n\t- [db.copy(src_doc, dest_doc, opts, [callback])](#dbcopysrc_doc-dest_doc-opts-callback)\n\t- [db.bulk(docs, [params], [callback])](#dbbulkdocs-params-callback)\n\t- [db.list([params], [callback])](#dblistparams-callback)\n\t- [db.fetch(docnames, [params], [callback])](#dbfetchdocnames-params-callback)\n- [attachments functions](#attachments-functions)\n\t- [db.attachment.insert(docname, attname, att, contenttype, [params], [callback])](#dbattachmentinsertdocname-attname-att-contenttype-params-callback)\n\t- [db.attachment.get(docname, attname, [params], [callback])](#dbattachmentgetdocname-attname-params-callback)\n\t- [db.attachment.destroy(docname, attname, rev, [callback])](#dbattachmentdestroydocname-attname-rev-callback)\n- [views and design functions](#views-and-design-functions)\n\t- [db.view(designname, viewname, [params], [callback])](#dbviewdesignname-viewname-params-callback)\n\t- [db.show(designname, showname, doc_id, [params], [callback])](#dbshowdesignname-showname-doc_id-params-callback)\n\t- [db.atomic(designname, updatename, docname, [body], [callback])](#dbatomicdesignname-updatename-docname-body-callback)\n- [using cookie authentication](#using-cookie-authentication)\n- [advanced features](#advanced-features)\n\t- [extending nano](#extending-nano)\n\t- [pipes](#pipes)\n- [tests](#tests)\n\n## getting started\n\nto use `nano` you need to connect it to your couchdb install, to do that:\n\n``` js\nvar nano = require('nano')('http://localhost:5984');\n```\n\nto create a new database:\n\n``` js\nnano.db.create('alice');\n```\n\nand to use it:\n\n``` js\nvar alice = nano.db.use('alice');\n```\n\nin this examples we didn't specify a `callback` function, the absence of a \ncallback means _\"do this, ignore what happens\"_.\nin `nano` the callback function receives always three arguments:\n\n* `err` - the error, if any\n* `body` - the http _response body_ from couchdb, if no error. \n  json parsed body, binary for non json responses\n* `header` - the http _response header_ from couchdb, if no error\n\n\na simple but complete example using callbacks is:\n\n``` js\nvar nano = require('nano')('http://localhost:5984');\n\n// clean up the database we created previously\nnano.db.destroy('alice', function() {\n  // create a new database\n  nano.db.create('alice', function() {\n    // specify the database we are going to use\n    var alice = nano.use('alice');\n    // and insert a document in it\n    alice.insert({ crazy: true }, 'rabbit', function(err, body, header) {\n      if (err) {\n        console.log('[alice.insert] ', err.message);\n        return;\n      }\n      console.log('you have inserted the rabbit.')\n      console.log(body);\n    });\n  });\n});\n```\n\nif you run this example(after starting couchdb) you will see:\n\n    you have inserted the rabbit.\n    { ok: true,\n      id: 'rabbit',\n      rev: '1-6e4cb465d49c0368ac3946506d26335d' }\n\nyou can also see your document in [futon](http://localhost:5984/_utils).\n\n## configuration\n\nconfiguring nano to use your database server is as simple as:\n\n``` js\nvar server = require('nano')('http://localhost:5984')\n  , db     = server.use('foo')\n  ;\n```\n\nhowever if you don't need to instrument database objects you can simply:\n\n``` js\n// nano parses the url and knows this is a database\nvar db = require('nano')('http://localhost:5984/foo');\n```\n\nyou can also pass options to the require:\n\n``` js\n// nano parses the url and knows this is a database\nvar db = require('nano')('http://localhost:5984/foo');\n```\n\nto specify further configuration options you can pass an object literal instead:\n\n``` js\n// nano parses the url and knows this is a database\nvar db = require('nano')(\n  { \"url\"             : \"http://localhost:5984/foo\"\n  , \"request_defaults\" : { \"proxy\" : \"http://someproxy\" }\n  , \"log\"             : function (id, args) { \n      console.log(id, args);\n    }\n  });\n```\nPlease check [request] for more information on the defaults. They support features like cookie jar, proxies, ssl, etc. \n\n### pool size and open sockets\n\na very important configuration parameter if you have a high traffic website and are using nano is setting up the `pool.size`. by default, the node.js http global agent (client) has a certain size of active connections that can run simultaneously, while others are kept in a queue. pooling can be disabled by setting the `agent` property in `request_defaults` to false, or adjust the global pool size using:\n\n``` js\nhttp.globalAgent.maxSockets = 20;\n```\n\nyou can also increase the size in your calling context using `request_defaults` if this is problematic. refer to the [request] documentation and examples for further clarification.\n\nhere's an example explicitly using the keep alive agent (installed using `npm install agentkeepalive`), especially useful to limit your open sockets when doing high-volume access to couchdb on localhost:\n\n``` js\nvar agentkeepalive = require('agentkeepalive');\nvar myagent = new agentkeepalive({\n    maxSockets: 50\n  , maxKeepAliveRequests: 0\n  , maxKeepAliveTime: 30000\n  });\n\nvar db = require('nano')(\n  { \"url\"              : \"http://localhost:5984/foo\"\n  , \"request_defaults\" : { \"agent\" : myagent }\n  });\n```\n\n\n## database functions\n\n### nano.db.create(name, [callback])\n\ncreates a couchdb database with the given `name`.\n\n``` js\nnano.db.create('alice', function(err, body) {\n  if (!err) {\n    console.log('database alice created!');\n  }\n});\n```\n\n### nano.db.get(name, [callback])\n\nget informations about `name`.\n\n``` js\nnano.db.get('alice', function(err, body) {\n  if (!err) {\n    console.log(body);\n  }\n});\n```\n\n### nano.db.destroy(name, [callback])\n\ndestroys `name`.\n\n``` js\nnano.db.destroy('alice');\n```\n\neven though this examples looks sync it is an async function.\n\n### nano.db.list([callback])\n\nlists all the databases in couchdb\n\n``` js\nnano.db.list(function(err, body) {\n  // body is an array\n  body.forEach(function(db) {\n    console.log(db);\n  });\n});\n```\n\n### nano.db.compact(name, [designname], [callback])\n\ncompacts `name`, if `designname` is specified also compacts its\nviews.\n\n### nano.db.replicate(source, target, [opts], [callback])\n\nreplicates `source` on `target` with options `opts`. `target`\nhas to exist, add `create_target:true` to `opts` to create it prior to\nreplication.\n\n``` js\nnano.db.replicate('alice', 'http://admin:password@otherhost.com:5984/alice',\n                  { create_target:true }, function(err, body) {\n    if (!err) \n      console.log(body);\n});\n```\n\n### nano.db.changes(name, [params], [callback])\n\nasks for the changes feed of `name`, `params` contains additions\nto the query string.\n\n``` js\nnano.db.changes('alice', function(err, body) {\n  if (!err) {\n    console.log(body);\n  }\n});\n```\n\n### nano.db.follow(name, [params], [callback])\n\nuses [follow] to create a solid changes feed. please consult follow documentation for more information as this is a very complete api on it's own\n\n``` js\nvar feed = db.follow({since: \"now\"});\nfeed.on('change', function (change) {\n  console.log(\"change: \", change);\n});\nfeed.follow();\nprocess.nextTick(function () {\n  db.insert({\"bar\": \"baz\"}, \"bar\");\n});\n```\n\n### nano.use(name)\n\ncreates a scope where you operate inside `name`.\n\n``` js\nvar alice = nano.use('alice');\nalice.insert({ crazy: true }, 'rabbit', function(err, body) {\n  // do something\n});\n```\n\n### nano.db.use(name)\n\nalias for `nano.use`\n\n### nano.db.scope(name)\n\nalias for `nano.use`\n\n### nano.scope(name)\n\nalias for `nano.use`\n\n### nano.request(opts, [callback])\n\nmakes a request to couchdb, the available `opts` are:\n\n* `opts.db` â the database name\n* `opts.method` â the http method, defaults to `get`\n* `opts.path` â the full path of the request, overrides `opts.doc` and\n  `opts.att`\n* `opts.doc` â the document name\n* `opts.att` â the attachment name\n* `opts.params` â query string parameters, appended after any existing `opts.path`, `opts.doc`, or `opts.att`\n* `opts.content_type` â the content type of the request, default to `json`\n* `opts.headers` â additional http headers, overrides existing ones\n* `opts.body` â the document or attachment body\n* `opts.encoding` â the encoding for attachments\n\n### nano.relax(opts, [callback])\n\nalias for `nano.request`\n\n### nano.dinosaur(opts, [callback])\n\nalias for `nano.request`\n\n                    _\n                  / '_)  WAT U SAY!\n         _.----._/  /\n        /          /\n      _/  (   | ( |\n     /__.-|_|--|_l\n\n### nano.config\n\nan object containing the nano configurations, possible keys are:\n\n* `url` - the couchdb url\n* `db` - the database name\n\n## document functions\n\n### db.insert(doc, [params], [callback])\n\ninserts `doc` in the database with  optional `params`. if params is a string, its assumed as the intended document name. if params is an object, its passed as query string parameters and `doc_name` is checked for defining the document name.\n\n``` js\nvar alice = nano.use('alice');\nalice.insert({ crazy: true }, 'rabbit', function(err, body) {\n  if (!err)\n    console.log(body);\n});\n```\n\n### db.destroy(docname, rev, [callback])\n\nremoves revision `rev` of `docname` from couchdb.\n\n``` js\nalice.destroy('alice', '3-66c01cdf99e84c83a9b3fe65b88db8c0', function(err, body) {\n  if (!err)\n    console.log(body);\n});\n```\n\n### db.get(docname, [params], [callback])\n\ngets `docname` from the database with optional query string\nadditions `params`.\n\n``` js\nalice.get('rabbit', { revs_info: true }, function(err, body) {\n  if (!err)\n    console.log(body);\n});\n```\n\n### db.head(docname, [callback])\n\nsame as `get` but lightweight version that returns headers only.\n\n``` js\nalice.head('rabbit', function(err, _, headers) {\n  if (!err)\n    console.log(headers);\n});\n```\n\n### db.copy(src_doc, dest_doc, opts, [callback])\n\n`copy` the contents (and attachments) of a document\nto a new document, or overwrite an existing target document\n\n``` js\nalice.copy('rabbit', 'rabbit2', { overwrite: true }, function(err, _, headers) {\n  if (!err)\n    console.log(headers);\n});\n```\n\n\n### db.bulk(docs, [params], [callback])\n\nbulk operations(update/delete/insert) on the database, refer to the \n[couchdb doc](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API).\n\n### db.list([params], [callback])\n\nlist all the docs in the database with optional query string additions `params`.  \n\n``` js\nalice.list(function(err, body) {\n  if (!err) {\n    body.rows.forEach(function(doc) {\n      console.log(doc);\n    });\n  }\n});\n```\n\n### db.fetch(docnames, [params], [callback])\n\nbulk fetch of the database documents, `docnames` are specified as per \n[couchdb doc](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API).\nadditional query string `params` can be specified, `include_docs` is always set\nto `true`.  \n\n## attachments functions\n\n### db.attachment.insert(docname, attname, att, contenttype, [params], [callback])\n\ninserts an attachment `attname` to `docname`, in most cases\n `params.rev` is required. refer to the\n [doc](http://wiki.apache.org/couchdb/HTTP_Document_API) for more details.\n\n``` js\nvar fs = require('fs');\n\nfs.readFile('rabbit.png', function(err, data) {\n  if (!err) {\n    alice.attachment.insert('rabbit', 'rabbit.png', data, 'image/png',\n      { rev: '12-150985a725ec88be471921a54ce91452' }, function(err, body) {\n        if (!err)\n          console.log(body);\n    });\n  }\n});\n```\n\nor using `pipe`:\n\n``` js\nvar fs = require('fs');\n\nfs.createReadStream('rabbit.png').pipe(\n    alice.attachment.insert('new', 'rab.png', null, 'image/png')\n);\n```\n\n### db.attachment.get(docname, attname, [params], [callback])\n\nget `docname`'s attachment `attname` with optional query string additions\n`params`.  \n\n``` js\nvar fs = require('fs');\n\nalice.attachment.get('rabbit', 'rabbit.png', function(err, body) {\n  if (!err) {\n    fs.writeFile('rabbit.png', body);\n  }\n});\n```\n\nor using `pipe`:\n\n``` js\nvar fs = require('fs');\n\nalice.attachment.get('rabbit', 'rabbit.png').pipe(fs.createWriteStream('rabbit.png'));\n```\n\n### db.attachment.destroy(docname, attname, rev, [callback])\n\ndestroy attachment `attname` of `docname`'s revision `rev`.\n\n``` js\nalice.attachment.destroy('rabbit', 'rabbit.png',\n    '1-4701d73a08ce5c2f2983bf7c9ffd3320', function(err, body) {\n      if (!err)\n        console.log(body);\n});\n```\n\n## views and design functions\n\n### db.view(designname, viewname, [params], [callback])\n\ncalls a view of the specified design with optional query string additions\n`params`. if you're looking to filter the view results by key(s) pass an array of keys, e.g\n`{ keys: ['key1', 'key2', 'key_n'] }`, as `params`.\n\n``` js\nalice.view('characters', 'crazy_ones', function(err, body) {\n  if (!err) {\n    body.rows.forEach(function(doc) {\n      console.log(doc.value);\n    });\n  }\n});\n```\n\n### db.show(designname, showname, doc_id, [params], [callback])\n\ncalls a show function of the specified design for the document specified by doc_id with \noptional query string additions `params`.  \n\n``` js\nalice.show('characters', 'format_doc', '3621898430', function(err, doc) {\n  if (!err) {\n    console.log(doc);\n  }\n});\n```\ntake a look at the [couchdb wiki](http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Showing_Documents)\nfor possible query paramaters and more information on show functions.\n\n### db.atomic(designname, updatename, docname, [body], [callback])\n\ncalls the design's update function with the specified doc in input.\n\n``` js\ndb.atomic(\"update\", \"inplace\", \"foobar\", \n{field: \"foo\", value: \"bar\"}, function (error, response) {\n  assert.equal(error, undefined, \"failed to update\");\n  assert.equal(response.foo, \"bar\", \"update worked\");\n});\n```\n\ncheck out the tests for a fully functioning example.\n\n## using cookie authentication\n\nnano supports making requests using couchdb's [cookie authentication](http://guide.couchdb.org/editions/1/en/security.html#cookies) functionality. there's a [step-by-step guide here](http://mahoney.eu/2012/05/23/couchdb-cookie-authentication-nodejs-nano/), but essentially you just:\n\n``` js\nvar nano     = require('nano')('http://localhost:5984')\n  , username = 'user'\n  , userpass = 'pass'\n  , callback = console.log // this would normally be some callback\n  , cookies  = {} // store cookies, normally redis or something\n  ;\n\nnano.auth(username, userpass, function (err, body, headers) {\n  if (err) { \n    return callback(err);\n  }\n\n  if (headers && headers['set-cookie']) {\n    cookies[user] = headers['set-cookie'];\n  }\n\n  callback(null, \"it worked\");\n});\n```\n\nreusing a cookie:\n\n``` js\nvar auth = \"some stored cookie\"\n  , callback = console.log // this would normally be some callback\n  , alice = require('nano')(\n    { url : 'http://localhost:5984/alice', cookie: 'AuthSession=' + auth });\n  ;\n\nalice.insert(doc, function (err, body, headers) {\n  if (err) {\n    return callback(err);\n  }\n\n  // change the cookie if couchdb tells us too\n  if (headers && headers['set-cookie']) {\n    auth = headers['set-cookie'];\n  }\n\n  callback(null, \"it worked\");\n});\n```\n\n## advanced features\n\n### extending nano\n\nnano is minimalistic but you can add your own features with\n`nano.request(opts, callback)`\n\nfor example, to create a function to retrieve a specific revision of the\n`rabbit` document:\n\n``` js\nfunction getrabbitrev(rev, callback) {\n  nano.request({ db: 'alice',\n                 doc: 'rabbit',\n                 method: 'get',\n                 params: { rev: rev }\n               }, callback);\n}\n\ngetrabbitrev('4-2e6cdc4c7e26b745c2881a24e0eeece2', function(err, body) {\n  if (!err) {\n    console.log(body);\n  }\n});\n```\n### pipes\n\nyou can pipe in nano like in any other stream.  \nfor example if our `rabbit` document has an attachment with name `picture.png`\n(with a picture of our white rabbit, of course!) you can pipe it to a `writable\nstream`\n\n``` js\nvar fs = require('fs'),\n    nano = require('nano')('http://127.0.0.1:5984/');\nvar alice = nano.use('alice');\nalice.attachment.get('rabbit', 'picture.png').pipe(fs.createWriteStream('/tmp/rabbit.png'));\n```\n\nthen open `/tmp/rabbit.png` and you will see the rabbit picture.\n\n\n## tutorials & screencasts\n\n* article: [nano - a minimalistic couchdb client for nodejs](http://writings.nunojob.com/2011/08/nano-minimalistic-couchdb-client-for-nodejs.html)\n* article: [getting started with node.js and couchdb](http://writings.nunojob.com/2011/09/getting-started-with-nodejs-and-couchdb.html)\n* article: [document update handler support](http://jackhq.tumblr.com/post/16035106690/nano-v1-2-x-document-update-handler-support-v1-2-x)\n* article: [nano 3](http://writings.nunojob.com/2012/05/Nano-3.html)\n* article: [securing a site with couchdb cookie authentication using node.js and nano](http://mahoney.eu/2012/05/23/couchdb-cookie-authentication-nodejs-nano/)\n* article: [adding copy to nano](http://blog.jlank.com/2012/07/04/adding-copy-to-nano/)\n* article: [how to update a document with nano](http://writings.nunojob.com/2012/07/How-To-Update-A-Document-With-Nano-The-CouchDB-Client-for-Node.js.html)\n* article: [thoughts on development using couchdb with node.js](http://tbranyen.com/post/thoughts-on-development-using-couchdb-with-nodejs)\n\n## roadmap\n\ncheck [issues][2]\n\n## tests\n\nto run (and configure) the test suite simply:\n\n``` sh\ncd nano\nnpm install\nnpm test\n```\n\nafter adding a new test you can run it individually (with verbose output) using:\n\n``` sh\nnano_env=testing node tests/doc/list.js list_doc_params\n```\n\nwhere `list_doc_params` is the test name.\n\n## meta\n\n                    _\n                  / _) roar! i'm a vegan!\n           .-^^^-/ /\n        __/       /\n       /__.|_|-|_|     cannes est superb\n\n* code: `git clone git://github.com/dscape/nano.git`\n* home: <http://github.com/dscape/nano>\n* bugs: <http://github.com/dscape/nano/issues>\n* build: [![build status](https://secure.travis-ci.org/dscape/nano.png)](http://travis-ci.org/dscape/nano)\n\n`(oo)--',-` in [caos][3]\n\n[1]: http://npmjs.org\n[2]: http://github.com/dscape/nano/issues\n[3]: http://caos.di.uminho.pt/\n[4]: https://github.com/dscape/nano/blob/master/cfg/couch.example.js\n[follow]: https://github.com/iriscouch/follow\n[request]:  https://github.com/mikeal/request\n\n## license\n\ncopyright 2011 nuno job <nunojob.com> (oo)--',--\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/LICENSE-2.0.html\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dscape/nano/issues"
  },
  "_id": "nano@3.3.8",
  "_shasum": "2c5476748adec74081e5fea6d1695449c8c66a95",
  "_from": "nano@3.3.x",
  "_resolved": "https://registry.npmjs.org/nano/-/nano-3.3.8.tgz"
}
